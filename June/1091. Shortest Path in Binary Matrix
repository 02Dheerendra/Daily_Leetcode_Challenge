class Solution {
public:
    int shortestPathBinaryMatrix(vector<vector<int>>& grid) {
        int n = grid.size();
        if(n==1 and grid[0][0]==0)
            return 1;
        if(grid[0][0]==1 ||grid[n-1][n-1]==1)
            return -1;
        queue<pair<pair<int,int>,int>> q; 
        q.push({{0,0},1});
        int dir[8][2] = {{1,0},{-1,0},{0,1},{0,-1},{1,1},{-1,-1},{-1,1},{1,-1}};
        while(!q.empty()){
            int len = q.size();
            while(len--){
                int x = q.front().first.first;
                int y = q.front().first.second;
                int z = q.front().second;
                q.pop();

                for(int i = 0; i < 8 ; i++){
                    int nx = x + dir[i][0];
                    int ny = y + dir[i][1];

                    if(nx>=0 and nx<n and ny>=0 and ny<n){
                        if(nx==n-1 and ny==n-1)
                            return z + 1;
                        if(grid[nx][ny]==0)
                        {
                            grid[nx][ny] = 1;
                            q.push({{nx,ny},z+1});
                        }
                    }
                }
            }
        }
        return -1;
    }
};
